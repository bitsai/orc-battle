(require 'list-lib)

(define *health* #f)
(define *agility* #f)
(define *strength* #f)

(define *foes* '())
(define *foe-builders* '())
(define *foes-num* 12)

(define (random n)
  (*:nextInt (java.util.Random) n))

(define (type-of obj)
  (*:getName (*:getClass obj)))

(define-syntax dotimes
  (syntax-rules ()
    ((dotimes (counter init) body ...)
     (do ((max init)
	  (counter 0 (+ counter 1)))
	 ((= counter max))
       body ...))))

(define (battle)
  (newline)
  (init-foes)
  (init-player)
  (game-loop)
  (when (player-dead?)
	(display "You have been killed. Game over."))
  (when (foes-dead?)
	(display "Congratulations! You have vanquished all foes.")))

(define (game-loop)
  (unless (or (player-dead?) (foes-dead?))
	  (show-player)
	  (dotimes (k (+ 1 (quotient (max 0 *agility*) 15)))
		   (unless (foes-dead?)
			   (show-foes)
			   (player-attack)))
	  (for-each (lambda (f)
		      (unless (foe-dead? f)
			      (f:attack)))
		    *foes*)
	  (game-loop)))

(define (init-player)
  (set! *health* 30)
  (set! *agility* 30)
  (set! *strength* 30))

(define (player-dead?)
  (<= *health* 0))

(define (show-player)
  (display "Health: ")
  (display *health*)
  (display " Agility: ")
  (display *agility*)
  (display " Strength: ")
  (display *strength*)
  (newline))

(define (player-attack)
  (display "Attack style: [s]tab [d]ouble swing [r]oundhouse")
  (case (read)
    ((s) (let ((x (+ 2 (randval (quotient *strength* 2)))))
	   (display "Your stab has a strength of ")
	   (display x)
	   (newline)
	   ((pick-foe):hit x)))
    ((d) (let ((x (randval (quotient *strength* 6))))
	   (display "Your double swing has a strength of ")
	   (display x)
	   (newline)
	   ((pick-foe):hit x)
	   (unless (foes-dead?)
		   ((pick-foe):hit x))))
    ((r) (dotimes (x (+ 1 (randval (quotient *strength* 3))))
		  (unless (foes-dead?)
			  ((random-foe):hit 1))))
    (else (player-attack))))

(define (randval n)
  (+ 1 (random (max 1 n))))

(define (random-foe)
  (let ((f (list-ref *foes* (random (length *foes*)))))
    (if (foe-dead? f)
	(random-foe)
	f)))

(define (pick-foe)
  (display "Foe #:")
  (let ((x (read)))
    (if (not (and (integer? x) (>= x 1) (<= x *foes-num*)))
	(begin (display "That is not a valid foe number.\n")
	       (pick-foe))
	(let ((f (list-ref *foes* (- x 1))))
	  (if (foe-dead? f)
	      (begin (display "That foe is already dead.\n")
		     (pick-foe))
	      f)))))

(define (init-foes)
  (let ((build-foe (lambda (x)
		     ((list-ref
		       *foe-builders*
		       (random (length *foe-builders*)))))))
    (set! *foes* (list-tabulate *foes-num* build-foe))))

(define (foe-dead? f)
  (<= f:health 0))

(define (foes-dead?)
  (every foe-dead? *foes*))

(define (show-foes)
  (display "Your foes:\n")
  (for-each (lambda (x)
	      (let ((f (list-ref *foes* x)))
		(display (+ x 1))
		(display ". ")
		(if (foe-dead? f)
		    (display "**dead**\n")
		    (begin (display "(Health = ")
			   (display f:health)
			   (display ") ")
			   (display (f:show))))))
	    (list-tabulate *foes-num* values)))

(define-simple-class foe ()
  (health init-value: (randval 10))
  ((hit x)
   (set! health (- health x))
   (if (foe-dead? (this))
       (begin (display "You killed the ")
	      (display (type-of (this)))
	      (display "!\n"))
       (begin (display "You hit the ")
	      (display (type-of (this)))
	      (display ", knocking off ")
	      (display x)
	      (display " health points!\n"))))
  ((show)
   (display "A fierce ")
   (display (type-of (this)))
   (newline)))

(define-simple-class orc (foe)
  (club-level init-value: (randval 8))
  ((show)
   (display "A wicked orc with a level ")
   (display club-level)
   (display " club\n"))
  ((attack)
   (let ((x (randval club-level)))
     (display "An orc swings his club at you and knocks off ")
     (display x)
     (display " of your health points.\n")
     (set! *health* (- *health* x)))))

(set! *foe-builders* (cons orc *foe-builders*))

(define-simple-class hydra (foe)
  ((show)
   (display "A malicious hydra with ")
   (display health)
   (display " heads\n"))
  ((hit x)
   (set! health (- health x))
   (if (foe-dead? (this))
       (display "The fully decapitated hydra falls to the floor!\n")
       (begin (display "You lop off ")
	      (display x)
	      (display " of the hydra's heads!\n"))))
  ((attack)
   (let ((x (randval (quotient health 2))))
     (display "A hydra attacks you with ")
     (display x)
     (display " of its heads! It also grows back 1 more head!\n")
     (set! health (+ health 1))
     (set! *health* (- *health* x)))))

(set! *foe-builders* (cons hydra *foe-builders*))

(define-simple-class slime (foe)
  (sliminess init-value: (randval 5))
  ((show)
   (display "A slime with a sliminess of ")
   (display sliminess)
   (newline))
  ((attack)
   (let ((x (randval sliminess)))
     (display "A slime wraps your legs and decreases your agility by ")
     (display x)
     (display "!\n")
     (set! *agility* (- *agility* x))
     (when (zero? (random 2))
	   (display "It also squirts your face, taking away 1 health!\n")
	   (set! *health* (- *health* 1))))))

(set! *foe-builders* (cons slime *foe-builders*))

(define-simple-class brigand (foe)
  ((attack)
   (let ((x (max *health* *agility* *strength*)))
     (cond ((= x *health*)
	    (display "A brigand hits with his slingshot for 2 health!\n")
	    (set! *health* (- *health* 2)))
	   ((= x *agility*)
	    (display "A brigand whips your leg for 2 agility!\n")
	    (set! *agility* (- *agility* 2)))
	   ((= x *strength*)
	    (display "A brigand whips your arm for 2 strength!\n")
	    (set! *strength* (- *strength* 2)))))))

(set! *foe-builders* (cons brigand *foe-builders*))

(battle)
