(require 'list-lib)
(require "ui.scm")
(require "util.scm")

;; Global variables
(define *player-health* #f)
(define *player-agility* #f)
(define *player-strength* #f)

(define *monsters* '())
(define *monster-builders* '())
(define *monster-num* 12)

(define *input-state* #f)
(define *attacks-left* #f)
(define *hits-left* #f)
(define *hit-strength* #f)

;; Main game functions
(define (new-game)
  (init-monsters)
  (init-player)
  (new-turn))

(define (new-turn)
  (show-player)
  (set! *attacks-left* (inc (quotient (max 0 *player-agility*) 15)))
  (new-attack))

(define (new-attack)
  (show-monsters)
  (get-attack))

(define (process-input input)
  (unless (or (player-dead?) (monsters-dead?))
    (output input "\n")
    (case *input-state*
      ((get-attack) (process-attack input))
      ((get-monster) (process-monster input)))))

(define (end-attack)
  (swap! *attacks-left* dec)
  (if (or (zero? *attacks-left*) (monsters-dead?))
      (end-turn)
      (new-attack)))

(define (end-turn)
  (output "\n")
  (dolist (m ::monster (remove monster-dead? *monsters*))
          (m:attack))
  (output "\n")
  (if (or (player-dead?) (monsters-dead?))
      (end-game)
      (new-turn)))

(define (end-game)
  (cond ((player-dead?)
         (output "You have been killed. Game over.\n"))
        ((monsters-dead?)
         (output "Congratulations! You have vanquished all foes.\n"))))

;; Player management functions
(define (randval n)
  (inc (rand-int (max 1 n))))

(define (init-player)
  (set! *player-health* 30)
  (set! *player-agility* 30)
  (set! *player-strength* 30))

(define (player-dead?)
  (<= *player-health* 0))

(define (show-player)
  (output "[Valiant Knight] "
          *player-health* " health, "
          *player-agility* " agility, "
          *player-strength* " strength\n"))

(define (get-attack)
  (output "Attack style: [S]tab [D]ouble swing [R]oundhouse\n")
  (set! *input-state* 'get-attack))

(define (process-attack input)
  (case input
    ((S) (let ((x (+ 2 (randval (quotient *player-strength* 2)))))
	   (output "Your stab has a strength of " x ".\n")
           (set! *hits-left* 1)
	   (set! *hit-strength* x)
           (get-monster)))
    ((D) (let ((x (randval (quotient *player-strength* 6))))
	   (output "Your double swing has a strength of " x ".\n")
	   (set! *hits-left* 2)
           (set! *hit-strength* x)
           (get-monster)))
    ((R) (begin (dotimes (_ (inc (randval (quotient *player-strength* 3))))
			 (unless (monsters-dead?)
                           ((random-monster):hit 1)))
		(end-attack)))
    (else (begin (output "That is not a valid attack.\n")
                 (get-attack)))))

(define (get-monster)
  (output "Monster #:\n")
  (set! *input-state* 'get-monster))

(define (process-monster input)
  (let ((m (pick-monster input)))
    (unless (eqv? m #!null)
      (m:hit *hit-strength*)
      (swap! *hits-left* dec)
      (if (or (zero? *hits-left*) (monsters-dead?))
          (end-attack)
          (get-monster)))))

;; Helper functions for player attacks
(define (random-monster) ::monster
  (let ((m (rand-nth *monsters*)))
    (if (monster-dead? m)
	(random-monster)
	m)))

(define (pick-monster x) ::monster
  (if (not (and (integer? x) (>= x 1) (<= x *monster-num*)))
      (begin (output "That is not a valid monster number.\n")
	     (get-monster)
             #!null)
      (let ((m (list-ref *monsters* (dec x))))
	(if (monster-dead? m)
	    (begin (output "That monster is already dead.\n")
		   (get-monster)
                   #!null)
            m))))

;; Monster management functions
(define (init-monsters)
  (let* ((make-random-monster (lambda (_) ((rand-nth *monster-builders*))))
         (new-monsters (list-tabulate *monster-num* make-random-monster)))
    (set! *monsters* new-monsters)))

(define (monster-dead? m ::monster)
  (<= m:health 0))

(define (monsters-dead?)
  (every monster-dead? *monsters*))

(define (show-monsters)
  (output "Your foes:\n")
  (dolist (x (iota *monster-num*))
	  (let ((m ::monster (list-ref *monsters* x)))
	    (output (inc x) ". ")
	    (if (monster-dead? m)
		(output "**dead**\n")
		(output "(Health = " m:health ") " (m:show))))))

;; The monsters
(define (class-name m)
  (let ((name (*:getName (*:getClass m))))
    (substring name (string-length "kawa.battle.") (string-length name))))

(define-simple-class monster ()
  (health)
  ((*init*)
   (set! health (randval 10)))
  ((hit x)
   (swap! health - x)
   (if (monster-dead? (this))
       (output "You killed the " (class-name (this)) "!\n")
       (output "You hit the " (class-name (this)) " for " x " health!\n")))
  ((show)
   (str "A fierce " (class-name (this)) "\n"))
  ((attack)
   #!abstract))

(define-simple-class orc (monster)
  (club-level)
  ((*init*)
   (invoke-special monster (this) '*init*)
   (set! club-level (randval 8)))
  ((show)
   (str "A wicked orc with a level " club-level " club\n"))
  ((attack)
   (let ((x (randval club-level)))
     (output "An orc swings his club at you for " x " health!\n")
     (swap! *player-health* - x))))
(swap! *monster-builders* conj orc)

(define-simple-class hydra (monster)
  ((show)
   (str "A malicious hydra with " (this):health " heads\n"))
  ((hit x)
   (swap! (this):health - x)
   (if (monster-dead? (this))
       (output "The fully decapitated hydra falls to the floor!\n")
       (output "You lop off " x " of the hydra's heads!\n")))
  ((attack)
   (let ((x (randval (quotient (this):health 2))))
     (output "A hydra attacks you with " x " of its heads!\n")
     (output "It also grows back 1 more head!\n")
     (swap! (this):health inc)
     (swap! *player-health* - x))))
(swap! *monster-builders* conj hydra)

(define-simple-class slime (monster)
  (sliminess)
  ((*init*)
   (invoke-special monster (this) '*init*)
   (set! sliminess (randval 5)))
  ((show)
   (str "A slime with a sliminess of " sliminess "\n"))
  ((attack)
   (let ((x (randval sliminess)))
     (output "A slime wraps around your legs for " x " agility!\n")
     (swap! *player-agility* - x)
     (when (zero? (rand-int 2))
       (output "It also squirts in your face for 1 health!\n")
       (swap! *player-health* dec)))))
(swap! *monster-builders* conj slime)

(define-simple-class brigand (monster)
  ((attack)
   (let ((x (max *player-health* *player-agility* *player-strength*)))
     (cond ((= x *player-health*)
            (output "A brigand hits with his slingshot for 2 health!\n")
	    (swap! *player-health* - 2))
	   ((= x *player-agility*)
            (output "A brigand whips your leg for 2 agility!\n")
	    (swap! *player-agility* - 2))
	   ((= x *player-strength*)
            (output "A brigand whips your arm for 2 strength!\n")
	    (swap! *player-strength* - 2))))))
(swap! *monster-builders* conj brigand)
